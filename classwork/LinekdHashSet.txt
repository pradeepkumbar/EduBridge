Java LinkedHashSet class contains unique elements only like HashSet.Java LinkedHashSet class provides all optional set operation and permits null elements.Java LinkedHashSet class is non synchronized.Java LinkedHashSet class maintains insertion order.


Iterator
Can traverse elements present in Collection only in the forward direction
Helps to traverse Map, List and Set.
Indexes cannot be obtained by using Iterator.
Cannot modify or replace elements present in Collection
Cannot add elements and it throws ConcurrentModificationException.
Certain methods of Iterator are next(), remove() and hasNext().
Can traverse elements present in Collection both in forward and backward
Can only traverse List and not the other two.


ListIterator
It has methods like nextIndex() and previousIndex() to obtain indexes of elements at any time while traversing List.
We can modify or replace elements with the help of set(E e)
Can easily add elements to a collection at any time.
Certain methods of ListIterator are next(), previous(), hasNext(), hasPrevious(), add(E e).


package collectionclasses;import java.util.Iterator;import java.util.LinkedList;import java.util.List;import java.util.ListIterator;public class ListIteratorExample {	public static void main(String[] args) {		// TODO Auto-generated method stub			List<String> list=new LinkedList<>();			list.add("Ten");			list.add("Nine");			list.add("eight");			list.add("seven");			list.add("six");						list.add("Five");						list.add("four");						ListIterator<String> iterator=list.listIterator();			while(iterator.hasNext())			{				System.out.println(iterator.next()+" "+iterator.nextIndex());			}			//iterator.next();			iterator.add("end");			System.out.println("----------------");			while(iterator.hasPrevious())			{				System.out.println(iterator.previous()+" "+iterator.previousIndex());			}	}}


package collectionclasses;import java.util.Iterator;import java.util.PriorityQueue;import java.util.Queue;public class QueueExample {	public static void main(String[] ar)	{		Queue<Integer> queue=new PriorityQueue<>();		queue.add(new Integer(100));		queue.add(new Integer(200));		queue.add(new Integer(300));		queue.add(new Integer(400));		queue.add(new Integer(500));		queue.offer(new Integer(23));		queue.offer(new Integer(67));		System.out.println(queue);		queue.remove();		queue.remove(new Integer(300));			System.out.println(queue.element());		queue.clear();		//System.out.println(queue.remove());				Iterator<Integer> itr=queue.iterator();						while(itr.hasNext())		{			System.out.println(itr.next());		}					}}
package collectionclasses;import java.util.ArrayDeque;import java.util.Deque;public class ArrayDequeEx {	public static void main(String[] args) {		// TODO Auto-generated method stub		Deque<Double> deque=new ArrayDeque<>();		deque.add(765.67);		deque.add(100.87);				deque.addFirst(34.74);		deque.addLast(78.90);		System.out.println(deque);		deque.remove();		deque.remove(100.87);		deque.removeFirst();		System.out.println(deque);	}

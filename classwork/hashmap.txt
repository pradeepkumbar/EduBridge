package collectionclasses;import java.util.Collection;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Set;public class SimpleMapExample {	public static void main(String[] args) {		// TODO Auto-generated method stub		Map<String, String> map=new HashMap<>();//key and value pair		map.put("username","abc@gmail.com");		map.put("password","1234");		map.put("company","edubridgeindia");		map.put("company","silversoft");		map.put("organization", "silversoft");		//map.put(10,10000);				Set<String> keys=map.keySet();				System.out.println("keys**********"+keys);				Collection<String> keyvalues=map.values();				System.out.println("values&&&&&&&&&&"+keyvalues);				System.out.println(map);						Iterator iterator=keys.iterator();								System.out.println("-----------------------------");		while(iterator.hasNext())//is there any more keys in the keys variable		{			System.out.println(iterator.next());//map.get("password")		}						Iterator it=k
Iterator it=keyvalues.iterator();				System.out.println("-----------------------------");		while(it.hasNext())//is there any more keys in the keys variable		{			System.out.println(it.next());//map.get("password")		}				Set<Map.Entry<String,String>> s = map.entrySet();				for (Map.Entry<String, String> it1: s)        {		  if(it1.getKey().equals("username")) {            // Using the getKey to get key of the it element            // Using the getValue to get value of the it element            System.out.println("key---> " +                        it1.getKey() + " value--->  " +  it1.getValue());		  }        }							}}


HashMap in Java is like the legacy Hashtable class, but it is not synchronized. It allows us to store the null elements as well, but there should be only one null key. Since Java 5, it is denoted as HashMap<K,V>, where K stands for key and V for value. It inherits the AbstractMap class and implements the Map interface.
Java HashMap contains values based on the key.Java HashMap contains only unique keys.Java HashMap may have one null key and multiple null values.Java HashMap is non synchronized.Java HashMap maintains no order.


Create a Class Main which would be used to accept Input values and storeit as a hash map, and call the static method present in UserMainCode.Input and Output Format:Input consists of an integer n corresponds to number of hash map values,followed by 2n values. (index followed by value).Output consists of a Double.Refer sample input and output for formatting specifications.Sample Input :413.4124.131.6142.5Sample Output :2.51


package collectionclasses.inpack;import java.text.DecimalFormat;import java.util.HashMap;import java.util.Map;import java.util.Set;public class UserMainCode {		static double calculateAverage(HashMap<Integer,Double> hashmap,int hashmapsize)	{		Set<Map.Entry<Integer,Double>> s = hashmap.entrySet();		double sum=0.0,avg=0.0;		int count=0;		for(Map.Entry<Integer, Double>  mpl : s)		{			int key=mpl.getKey();			if(key%2!=0)			{				sum=sum+mpl.getValue();				count++;			}		}		avg=sum/count;		DecimalFormat df = new DecimalFormat(".##");		String b1 = df.format(avg);		double b = Double.parseDouble(b1);				return b;			}}
package collectionclasses.inpack;import java.util.HashMap;import java.util.Scanner;public class Main {	public static void main(String[] args) {		// TODO Auto-generated method stub		int size;		int key;		double value;		HashMap<Integer,Double> hashmap=new HashMap<>();		Scanner sn=new Scanner(System.in);		System.out.println("enter the size of the hashmap");		size=sn.nextInt();				for(int i=0;i<size;i++) {		System.out.println("enter the key and value");		key=sn.nextInt();		value=sn.nextDouble();		hashmap.put(key,value);		}				double res=UserMainCode.calculateAverage(hashmap, size);		System.out.println(res);	}}



package collectionclasses;import java.util.Collection;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Set;public class SimpleMapExample {	public static void main(String[] args) {		// TODO Auto-generated method stub		Map<String, String> map=new HashMap<>();//key and value pair		map.put("username","abc@gmail.com");		map.put("password","1234");		map.put("company","edubridgeindia");		map.put("company","silversoft");		map.put("organization", "silversoft");		map.put("one", null);		map.put("two", null);				//map.put(10,10000);				Set<String> keys=map.keySet();				System.out.println("keys**********"+keys);				Collection<String> keyvalues=map.values();				System.out.println("values&&&&&&&&&&"+keyvalues);				System.out.println(map);						Iterator iterator=keys.iterator();								System.out.println("-----------------------------");		while(iterator.hasNext())//is there any more keys in the keys variable		{			System.out.println(iterator.next
System.out.println("-----------------------------");		while(iterator.hasNext())//is there any more keys in the keys variable		{			System.out.println(iterator.next());//map.get("password")		}						Iterator it=keyvalues.iterator();				System.out.println("-----------------------------");		while(it.hasNext())//is there any more keys in the keys variable		{			System.out.println(it.next());//map.get("password")		}				Set<Map.Entry<String,String>> s = map.entrySet();				for (Map.Entry<String, String> it1: s)        {		  if(it1.getKey().equals("username")) {            // Using the getKey to get key of the it element            // Using the getValue to get value of the it element            System.out.println("key---> " +                        it1.getKey() + " value--->  " +  it1.getValue());		  }        }							}}


Assignment:
1.Grade CalculatorA School wants to give assign grades to its students based on theirmarks. You have been assigned as the programmer to automate this process.You would like to showcase your skills by creating a quick prototype. Theprototype consists of the following steps:Read student details from the User. The details would include name,mark in the given order. The datatype for name is string, mark is float.You decide to build a hashmap. The hashmap contains name as key andmark as value.
2.BUSINESS RULE:1. If Mark is less than 60, then grade is FAIL.2. If Mark is greater than or equal to 60, then grade is PASS.Note: FAIL/PASS should be in uppercase.Store the result in a new Hashmap with name as Key and grade as value.4. You decide to write a function calculateGrade which takes the abovehashmap as input and returns the hashmap as output. Include this functionin class UserMainCode.Create a Class Main which would be used to read student details in step1 and build the hashmap. Call the static method present in UserMainCode.Input and Output Format:Input consists of student details. The first number indicates the size ofthe students. The next two values indicate the name, mark.Output consists of a name and corresponding grade for each student.Refer sample output for formatting specifications.Sample Input 1:3Avi76.36Sunil68.42Raja36.25Sample Output 1:AviPASSSunilPASSRajaFAIL



vector
package collectionclasses;import java.util.Iterator;import java.util.Vector;public class VectorExample {	public static void main(String[] args) {		// TODO Auto-generated method stub		 //similar to arraylist but arraylist is 		//not synchronized but vector is synchronized			Vector<String> v=new Vector<String>();  			v.add("Ayush");  			v.add("Amit");  			v.add("Ashish");  			v.add("Garima");  			Iterator<String> itr=v.iterator();  			while(itr.hasNext()){  			System.out.println(itr.next());  			}  	}}

hashTable
package collectionclasses;import java.util.Hashtable;import java.util.Map;import java.util.Map.Entry;public class HashTableExample {	public static void main(String[] ar)	{	Hashtable<Integer,String> hm=new Hashtable<Integer,String>();  	  	  hm.put(100,"Amit");  	  hm.put(102,"Ravi");  	  hm.put(101,"Vijay");  	  hm.put(103,"Rahul");  	  	  for(Map.Entry<Integer,String> m:hm.entrySet()){  	   System.out.println(m.getKey()+" "+m.getValue());  	  }  }}


Properties
create a file with .properties extension
package collectionclasses;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.util.Properties;public class PropertiesDemo {	public static void main(String[] args) throws IOException	{		 FileReader reader = new FileReader("db.properties");	        // create properties object      Properties p = new Properties();      // Add a wrapper around reader object      p.load(reader);      // access properties data      System.out.println(p.getProperty("username"));      System.out.println(p.getProperty("password"));      System.out.println(p.getProperty("port"));      System.out.println(p.getProperty("databasename"));                        	}}

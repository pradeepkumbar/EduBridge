package Inheritanceex;import java.util.Scanner;class Animal {	String name;	int age;			public void eat(){System.out.println("eating...");} 	void sleep() {		System.out.println("Sleeps");	}	}public class Dog extends Animal{	public Dog()	{			}	public Dog(String name, int age)	{		this.name=name;		this.age=age;	}	@Override// writing the same method of base class in the child class with different defination	public void eat(){		System.out.println("dog eats veg and nonveg");		} 		public void eat(String name){		System.out.println("dog eats veg and nonveg");		} 		void bark()	{		System.out.println("barks");	}	public static Animal createObject(String name)	{		if(name.equals("Animal"))		{			return new Animal();		}else if(name.equals("Cat"))		{			return new Cat();		}else if(name.equals("Dog"))		{			return new Dog();		}else			return null;	}		public static void main(String[] args)	{		Scanner sn=new Scanner(System.in);		String value=sn.next();			/*	Polymorphism--pol

/*	Polymorphism--poly means many morphism--forms		overriding */				Animal animal=createObject(value);		animal.eat();		animal.sleep();				if(animal instanceof Animal)		{			Animal an=animal;								}else if(animal instanceof Cat)		{			Cat c=(Cat)animal;														}else if(animal instanceof Dog)		{			Dog d=(Dog)animal;		}						Animal animal=new Dog();//upcasting autocasting-implicit		animal.sleep();		animal.eat();//eat --base  or eat--child		Dog d=(Dog)animal;//downcasting--manual--explicit casting				int num=10;		long number=10000;		number=num;//implicit casting				num=(int) number;//explicit casting				d.bark();		animal=new Cat();		animal.eat();	}}
	